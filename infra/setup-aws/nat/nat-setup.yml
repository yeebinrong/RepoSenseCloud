---
AWSTemplateFormatVersion: "2010-09-09"
Description: Cloudformation Template
Parameters:
  Stage:
    Type: String
    Default: common
    AllowedValues:
      - common
  NATInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro

Mappings:
  RegionMap:
    ap-southeast-1:
      NATInstanceAMI: ami-0012a981fe3b8891f

Resources:
  NATVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 30.255.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-vpc"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  # Private Subnets across Multiple Availability Zones
  NATVpcPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NATVpc
      CidrBlock: 30.255.0.0/19
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-private-1"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  NATVpcPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NATVpc
      CidrBlock: 30.255.32.0/19
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-private-2"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  NATVpcPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NATVpc
      CidrBlock: 30.255.64.0/19
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-private-3"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  # Public Subnets across Multiple Availability Zones
  NATVpcPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NATVpc
      CidrBlock: 30.255.128.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-public-1"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  NATVpcPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NATVpc
      CidrBlock: 30.255.144.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-public-2"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  NATVpcPublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NATVpc
      CidrBlock: 30.255.160.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-public-3"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  NATEnvPublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATEnvPublicRouteTable
      SubnetId: !Ref NATVpcPublicSubnet1

  NATEnvPublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATEnvPublicRouteTable
      SubnetId: !Ref NATVpcPublicSubnet2

  NATEnvPublicRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATEnvPublicRouteTable
      SubnetId: !Ref NATVpcPublicSubnet3

  NATEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "rsc-${Stage}-NATEnvSecurityGroup"
      GroupDescription: "Allow all Inbound, all Outbound"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-sg"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"
      VpcId:
        Ref: NATVpc

  NATEnvInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-igw"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  NATEnvNATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "rsc-${Stage}-NAT-SG"
      GroupDescription: "NAT instance security group"
      SecurityGroupIngress:
          - IpProtocol: "-1"
            Description: "Access from private subnet"
            CidrIp: 30.255.0.0/17
      SecurityGroupEgress:
      SecurityGroupEgress:
          - IpProtocol: "-1"
            Description: "Allow all outbound access"
            CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-nat-sg"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"
      VpcId:
        Ref: NATVpc

  NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - NATInstanceAMI
      InstanceType: !Sub "${NATInstanceType}"
      KeyName: !Sub "rsc-${Stage}"
      SourceDestCheck: false
      SubnetId: !Ref NATVpcPublicSubnet1
      SecurityGroupIds:
        - !GetAtt "NATEnvNATSecurityGroup.GroupId"
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-nat-instance"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  NATInstanceEIP:
    Type: AWS::EC2::EIP
    DependsOn: NATEnvInternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-eip"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  NATInstanceEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref NATInstance
      EIP: !Ref NATInstanceEIP

  NATEnvPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NATVpc
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-private-rtb"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  NATEnvPrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATEnvPrivateRouteTable
      SubnetId: !Ref NATVpcPrivateSubnet1

  NATEnvPrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATEnvPrivateRouteTable
      SubnetId: !Ref NATVpcPrivateSubnet2

  NATEnvPrivateRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATEnvPrivateRouteTable
      SubnetId: !Ref NATVpcPrivateSubnet3

  NATEnvPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NATVpc
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-public-rtb"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  NATEnvInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref NATEnvInternetGateway
      VpcId: !Ref NATVpc

  NATEnvOutboundRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: NATEnvPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: NATEnvInternetGateway

  NATInstanceStopRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Stop NAT instance every day at 12 AM SGT"
      ScheduleExpression: "cron(0 16 * * ? *)"  # 12AM SGT = 4PM UTC
      State: ENABLED
      Targets:
        - Id: "StopNATInstanceTarget"
          Arn: arn:aws:ssm:ap-southeast-1::automation-definition/AWS-StopEC2Instance:$DEFAULT
          RoleArn: !GetAtt NATSSMExecutionRole.Arn
          Input: !Sub |
            {
              "InstanceId": ["${NATInstance}"]
            }

  NATSSMExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "AllowSSMAutomationExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: "*"

Outputs:
  NATEnvSecurityGroup:
    Value: !Ref NATEnvSecurityGroup
    Export:
      Name: !Sub rsc-${Stage}-NATEnvSecurityGroup
  NATEnvInternalSecurityGroup:
    Value: !Ref NATEnvNATSecurityGroup
    Export:
      Name: !Sub rsc-${Stage}-NATEnvInternalSecurityGroup
  NATVpc:
    Value: !Ref NATVpc
    Export:
      Name: !Sub rsc-${Stage}-NATVpc
  NATVpcPublicSubnet1:
    Value: !Ref NATVpcPublicSubnet1
    Export:
      Name: !Sub rsc-${Stage}-NATVpcPublicSubnet1
  NATVpcPrivateSubnet1:
    Value: !Ref NATVpcPrivateSubnet1
    Export:
      Name: !Sub rsc-${Stage}-NATVpcPrivateSubnet1
  NATVpcPublicSubnet2:
    Value: !Ref NATVpcPublicSubnet2
    Export:
      Name: !Sub rsc-${Stage}-NATVpcPublicSubnet2
  NATVpcPrivateSubnet2:
    Value: !Ref NATVpcPrivateSubnet2
    Export:
      Name: !Sub rsc-${Stage}-NATVpcPrivateSubnet2
  NATVpcPublicSubnet3:
    Value: !Ref NATVpcPublicSubnet3
    Export:
      Name: !Sub rsc-${Stage}-NATVpcPublicSubnet3
  NATVpcPrivateSubnet3:
    Value: !Ref NATVpcPrivateSubnet3
    Export:
      Name: !Sub rsc-${Stage}-NATVpcPrivateSubnet3