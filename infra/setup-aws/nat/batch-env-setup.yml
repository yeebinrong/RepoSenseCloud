---
AWSTemplateFormatVersion: "2010-09-09"
Description: Cloudformation Template
Parameters:
  Stage:
    Type: String
    Default: dev
  KeyPairName:
    Type: String
    Default: rsc-dev
  NATInstanceType:
    Type: String
    Default: t2.micro

Mappings:
  RegionMap:
    ap-southeast-1:
      NATInstanceAMI: ami-0012a981fe3b8891f

Resources:
  S3DeploymentBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "rsc-${Stage}-batch-bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Sub "rsc:${Stage}"
        - Key: Name
          Value: !Sub "rsc-${Stage}-batch-bucket"

  BatchEnvVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 30.255.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-vpc"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  BatchEnvVPCPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: BatchEnvVPC
      CidrBlock: 30.255.0.0/19
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-private-1"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  BatchEnvVPCPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: BatchEnvVPC
      CidrBlock: 30.255.32.0/19
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-private-2"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  BatchEnvVPCPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: BatchEnvVPC
      CidrBlock: 30.255.128.0/20
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-public-1"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  BatchEnvPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BatchEnvPublicRouteTable
      SubnetId: !Ref BatchEnvVPCPublicSubnet1

  BatchEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "rsc-${Stage}-BatchEnvSecurityGroup"
      GroupDescription: "Allow all Inbound, all Outbound"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-sg"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"
      VpcId:
        Ref: BatchEnvVPC

  BatchEnvInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-igw"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  BatchEnvNATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "rsc-${Stage}-NAT-SG"
      GroupDescription: "NAT instance security group"
      SecurityGroupIngress:
          - IpProtocol: "-1"
            Description: "Access from private subnet"
            CidrIp: 30.255.0.0/17
      SecurityGroupEgress:
          - IpProtocol: "-1"
            Description: "Allow all outbound access"
            CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-nat-sg"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"
      VpcId:
        Ref: BatchEnvVPC

  BatchEnvNATInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - NATInstanceAMI
      InstanceType: !Sub "${NATInstanceType}"
      KeyName: !Sub "${KeyPairName}"
      SourceDestCheck: false
      SubnetId: !Ref BatchEnvVPCPublicSubnet1
      SecurityGroupIds:
        - !GetAtt "BatchEnvNATSecurityGroup.GroupId"
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-nat-instance"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  BatchEnvNATGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: BatchEnvInternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-eip"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  BatchEnvNATInstanceEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref BatchEnvNATInstance
      EIP: !Ref BatchEnvNATGatewayAttachment

  BatchEnvPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BatchEnvVPC
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-private-rtb"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  BatchEnvPrivateRouteNATInstance:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BatchEnvPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref BatchEnvNATInstance

  BatchEnvPrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BatchEnvPrivateRouteTable
      SubnetId: !Ref BatchEnvVPCPrivateSubnet1

  BatchEnvPrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BatchEnvPrivateRouteTable
      SubnetId: !Ref BatchEnvVPCPrivateSubnet2

  BatchEnvPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BatchEnvVPC
      Tags:
        - Key: Name
          Value: !Sub "rsc-${Stage}-public-rtb"
        - Key: Environment
          Value: !Sub "rsc:${Stage}"

  BatchEnvInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref BatchEnvInternetGateway
      VpcId: !Ref BatchEnvVPC

  BatchEnvOutboundRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: BatchEnvPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: BatchEnvInternetGateway

  BatchExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "rsc-${Stage}-BatchExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
                - ecs-tasks.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref BatchExecutionDynamoDBPolicy
        - !Ref BatchExecutionS3Policy
        - !Ref BatchExecutionLogPolicy
        - !Ref BatchExecutionEcsPolicy
        - !Ref BatchExecutionAutoScalingPolicy
        - !Ref BatchExecutionEC2Policy
        - !Ref BatchExecutionIAMPolicy
        - !Ref BatchExecutionCloudwatchPolicy
        - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/rsc-${Stage}-LambdaExecutionInvokeFunctionPolicy" # Policy created in env-setup.yml
      Policies:
        - PolicyName: !Sub "rsc-${Stage}-BatchExecutionDmsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dms:Describe*
                  - dms:ListTagsForResource
                Resource: "*"
              - Effect: Allow
                Action:
                  - dms:ModifyReplicationTask
                  - dms:StartReplicationTask
                  - dms:DeleteReplicationTask
                  - dms:StopReplicationTask
                  - dms:CreateReplicationTask
                  - dms:AddTagsToResource
                  - dms:TestConnection
                Resource:
                  - !Sub "arn:aws:dms:${AWS::Region}:${AWS::AccountId}:task:*"
                  - !Sub "arn:aws:dms:${AWS::Region}:${AWS::AccountId}:endpoint:*"
                  - !Sub "arn:aws:dms:${AWS::Region}:${AWS::AccountId}:rep:*"
        - PolicyName: !Sub "rsc-${Stage}-BatchExecutionSqsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*-rsc-*"
        - PolicyName: !Sub "rsc-${Stage}-BatchExecutionSsmPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/rsc/${Stage}/*"
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                Resource:
                  - "*"
        - PolicyName: !Sub "rsc-${Stage}-BatchExecutionSesPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: 
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:configuration-set/*"
        - PolicyName: !Sub "rsc-${Stage}-BatchExecutionIdpPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:*userpool/*"

  BatchEcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "rsc-${Stage}-BatchEcsInstanceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  BatchEcsInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Sub "rsc-${Stage}-BatchEcsInstanceProfile"
      Roles:
        - !Ref BatchEcsInstanceRole

  BatchExecutionCloudwatchPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "rsc-${Stage}-BatchExecutionCloudwatchPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: "*"
  BatchExecutionS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "rsc-${Stage}-BatchExecutionS3Policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:Get*
              - s3:List*
              - s3:Put*
              - s3:DeleteObject*
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::rsc-${Stage}*"
              - !Sub "arn:aws:s3:::rsc-${Stage}*/*"
  BatchExecutionDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "rsc-${Stage}-BatchExecutionDynamoDBPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:DescribeTable
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              - !Join
                - ":"
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - !Sub "table/rsc-${Stage}*"
          - Action:
              - dynamodb:GetShardIterator
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
            Effect: Allow
            Resource:
              - !Join
                - ":"
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - !Sub "table/rsc-${Stage}*/index/*"
              - !Join
                - ":"
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - !Sub "table/rsc-${Stage}*/stream/*"
  BatchExecutionLogPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "rsc-${Stage}-BatchExecutionLogPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Join
                - ":"
                - - "arn:aws:logs"
                  - "*"
                  - !Ref AWS::AccountId
                  - !Sub "/aws/batch/rsc-${Stage}*"
                  - "*:*"
              - !Join
                - ":"
                - - "arn:aws:logs"
                  - "*"
                  - !Ref AWS::AccountId
                  - !Sub "log-group:/aws/batch/rsc-${Stage}*"
              - !Join
                - ":"
                - - "arn:aws:logs"
                  - "*"
                  - !Ref AWS::AccountId
                  - "log-group:/aws/batch/job:*"
          - Action: logs:DescribeLogGroups
            Resource:
              - !Sub "arn:aws:logs:*:${AWS::AccountId}:log-group:*"
            Effect: Allow
  BatchExecutionEcsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "rsc-${Stage}-BatchExecutionEcsPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - ecs:List*
              - ecs:Describe*
              - ecs:CreateCluster
              - ecs:TagResource
              - ecs:UntagResource
              - ecs:RunTask
              - ecs:StartTask
              - ecs:StopTask
              - ecs:DeregisterTaskDefinition
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:UpdateContainerAgent
              - ecs:RegisterContainerInstance
              - ecs:DeleteCluster
              - ecs:DeregisterContainerInstance
            Effect: Allow
            Resource:
              - !Join
                - ":"
                - - "arn:aws:ecs"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - "container-instance/*"
              - !Join
                - ":"
                - - "arn:aws:ecs"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - "cluster/*"
  BatchExecutionIAMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "rsc-${Stage}-BatchExecutionIAMPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - iam:GetInstanceProfile
              - iam:GetRole
            Resource: "*"
            Effect: Allow
          - Action: iam:PassRole
            Resource:
              Fn::GetAtt:
                - BatchEcsInstanceRole
                - Arn
            Effect: Allow
          - Action: iam:PassRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEquals:
                iam:PassedToService:
                  - "ec2.amazonaws.com"
                  - "ecs-tasks.amazonaws.com"
          - Action: iam:CreateServiceLinkedRole
            Resource: "*"
            Effect: Allow
            Condition:
              StringEquals:
                iam:AWSServiceName:
                  - "spot.amazonaws.com"
                  - "spotfleet.amazonaws.com"
                  - "autoscaling.amazonaws.com"
                  - "ecs.amazonaws.com"
  BatchExecutionAutoScalingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "rsc-${Stage}-BatchExecutionAutoScalingPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeLaunchConfigurations
            Effect: Allow
            Resource: "*"
          - Action:
              - autoscaling:CreateLaunchConfiguration
              - autoscaling:DeleteLaunchConfiguration
              - autoscaling:PutNotificationConfiguration
            Effect: Allow
            Resource:
              - !Join
                - ":"
                - - "arn:aws:autoscaling"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - !Sub "launchConfiguration:*:launchConfigurationName/rsc-${Stage}-*"
          - Action:
              - autoscaling:CreateAutoScalingGroup
              - autoscaling:UpdateAutoScalingGroup
              - autoscaling:SetDesiredCapacity
              - autoscaling:DeleteAutoScalingGroup
              - autoscaling:CreateOrUpdateTags
              - autoscaling:SuspendProcesses
              - autoscaling:TerminateInstanceInAutoScalingGroup
            Effect: Allow
            Resource:
              - !Join
                - ":"
                - - "arn:aws:autoscaling"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - !Sub "autoScalingGroup:*:autoScalingGroupName/rsc-${Stage}-*"
  BatchExecutionEC2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "rsc-${Stage}-BatchExecutionEC2Policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - ec2:Describe*
              - ec2:Get*
            Effect: Allow
            Resource: "*"
          - Action:
              - ec2:TerminateInstances
              - ec2:RunInstances
            Effect: Allow
            Resource:
              - !Join
                - ":"
                - - "arn:aws:ec2"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - "instance/*"
          - Action:
              - ec2:CreateTags
            Effect: Allow
            Resource: "*"
            Condition:
              StringEquals:
                iam:CreateAction:
                  - "RunInstances"

Outputs:
  BatchExecutionRole:
    Value:
      Fn::GetAtt:
        - BatchExecutionRole
        - Arn
    Export:
      Name: !Sub rsc-${Stage}-BatchExecutionRole
  BatchEnvSecurityGroup:
    Value: !Ref BatchEnvSecurityGroup
    Export:
      Name: !Sub rsc-${Stage}-BatchEnvSecurityGroup
  BatchEnvVPC:
    Value: !Ref BatchEnvVPC
    Export:
      Name: !Sub rsc-${Stage}-BatchEnvVPC
  BatchEnvVPCPublicSubnet1:
    Value: !Ref BatchEnvVPCPublicSubnet1
    Export:
      Name: !Sub rsc-${Stage}-BatchEnvVPCPublicSubnet1
  BatchEnvVPCPrivateSubnet1:
    Value: !Ref BatchEnvVPCPrivateSubnet1
    Export:
      Name: !Sub rsc-${Stage}-BatchEnvVPCPrivateSubnet1
  BatchEnvVPCPrivateSubnet2:
    Value: !Ref BatchEnvVPCPrivateSubnet2
    Export:
      Name: !Sub rsc-${Stage}-BatchEnvVPCPrivateSubnet2