service: static-rsc-frontend

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  stage: ${opt:stage, 'dev'}

plugins:
  - serverless-finch

custom:
  domain:
    dev: reposensecloud-dev.hamb-urger.com
    eval: reposensecloud.hamb-urger.com
  client:
    bucketName: ${sls:stage}-static-rsc-frontend-bucket
    distributionFolder: build
    indexDocument: index.html
    errorDocument: index.html
    cloudFront: true
    domain: ${self:custom.domain.${self:provider.stage}}
    region: ap-southeast-1
    certificateName: 7594207b-44fa-4ba5-b3c9-cbf7add85bfd
    hostedZoneId: Z0363756J3J6DXLN7CZ0

resources:
  Resources:
    # Need to add another bucket to redirect non-www to www
    # You can setup another Cloudfront distribution that targets the redirect bucket URL (not the bucket itself, it's important), which will target the website you want to redirect to.
    # 1. Create a website bucket with it's name being the domain that will redirect
    # 2. Set it's redirect rule to target the domain it's supposed to redirect to
    # 3. Create a Cloudfront distribution in front of the bucket you just created. But instead of targeting the S3 bucket, you target the S3 website URL
    # 4. Create a record in Route53 that targets your new Cloudfront distribution
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.client.bucketName}
        WebsiteConfiguration:
          IndexDocument: ${self:custom.client.indexDocument}
          ErrorDocument: ${self:custom.client.errorDocument}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000

    ## Comment out policy on first deployment to disable block public access on s3 bucket
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: WebsiteBucket }
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                - arn:aws:s3:::${self:custom.client.bucketName}/*

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.client.bucketName}.s3-website-${self:provider.region}.amazonaws.com
              Id: S3-${self:custom.client.bucketName}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: true
          DefaultRootObject: ${self:custom.client.indexDocument}
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: S3-${self:custom.client.bucketName}
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          Aliases: # Required for Route53 to set alias to cloudfront distribution
            - ${self:custom.client.domain}
            - www.${self:custom.client.domain}
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:${aws:accountId}:certificate/${self:custom.client.certificateName}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          PriceClass: PriceClass_200 # PriceClass_100 does not include SG
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html

    Route53RecordSetPrimary:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${self:custom.client.hostedZoneId}
        Name: ${self:custom.client.domain}
        Type: A
        AliasTarget:
          DNSName: { 'Fn::GetAtt': [ CloudFrontDistribution, DomainName ] }
          HostedZoneId: Z2FDTNDATAQYW2 # CloudFront Hosted Zone ID https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset-aliastarget.html

    Route53RecordSetSecondary:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${self:custom.client.hostedZoneId}
        Name: www.${self:custom.client.domain}
        Type: A
        AliasTarget:
          DNSName: { 'Fn::GetAtt': [ CloudFrontDistribution, DomainName ] }
          HostedZoneId: Z2FDTNDATAQYW2 # CloudFront Hosted Zone ID https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset-aliastarget.html

functions: {}