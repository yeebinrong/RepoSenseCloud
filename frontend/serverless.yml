service: static-rsc-frontend

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1

plugins:
  - serverless-finch

custom:
  client:
    bucketName: ${sls:stage}-static-rsc-frontend-bucket
    distributionFolder: build
    indexDocument: index.html
    errorDocument: index.html
    cloudFront: true
    domain: responsecloud.hamb-urger.com
    region: ap-southeast-1
    certificateName: 7a0ddad5-6a5c-4521-87b8-11d60c4ea3ad
    hostedZoneId: Z0363756J3J6DXLN7CZ0

resources:
  Resources:
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.client.bucketName}
        WebsiteConfiguration:
          IndexDocument: ${self:custom.client.indexDocument}
          ErrorDocument: ${self:custom.client.errorDocument}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000

    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: WebsiteBucket }
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                - arn:aws:s3:::${self:custom.client.bucketName}/*
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.client.bucketName}.s3.amazonaws.com
              Id: S3-${self:custom.client.bucketName}
              S3OriginConfig:
                OriginAccessIdentity: ''
          Enabled: true
          DefaultRootObject: ${self:custom.client.indexDocument}
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: S3-${self:custom.client.bucketName}
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:${aws:accountId}:certificate/${self:custom.client.certificateName}
            SslSupportMethod: sni-only
          PriceClass: PriceClass_200 # PriceClass_100 does not include SG
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html

    Route53RecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${self:custom.client.hostedZoneId}
        Name: ${self:custom.client.domain}
        Type: A
        AliasTarget:
          DNSName: { 'Fn::GetAtt': [ CloudFrontDistribution, DomainName ] }
          HostedZoneId: ${self:custom.client.hostedZoneId} # CloudFront Hosted Zone ID

functions: {}